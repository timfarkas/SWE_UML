@startuml SkillBridge: Tech Skills Volunteering Platform

abstract class User {
  -userID: int
  -username: string
  -password: string
  -email: string
  -technicalSkills: List<Skill>
  -linkedInProfileURL: string
  -linkedInConnected: boolean
  -linkedInAccessToken: string
  +login(): bool
  +changePassword(newPassword: string): void
  +recoverPassword(): void
  +register(type: string): void
  +addSkill(skill: Skill): void
  +removeSkill(skill: Skill): void
  +connectLinkedInProfile(): boolean
  +disconnectLinkedInProfile(): void
  +importSkillsFromLinkedIn(): List<Skill>
}

class Volunteer {
  -volunteerID: int
  -historyOfHelp: string
  -impactMetrics: string
  -skillLevels: Map<Skill, Level>
  -yearsExperience: Map<Skill, int>
  -projectPortfolio: List<Project>
  +requestSignUpForOpportunity(opportunity: Opportunity): SignUpRequest
  +cancelVolunteering(opportunity: Opportunity): void
  +uploadHistory(history: string): void
  +viewDashboard(): DashboardData
  +updateSkillLevel(skill: Skill, level: Level): void
  +addProject(project: Project): void
}

class SMB {
  -smbID: int
  -verificationStatus: string
  -companyRegistrationNumber: string
  -requiredSkills: List<Skill>
  -techStack: List<Technology>
  +createPartnership(charity: Charity): Partnership
  +manageAssociations(): void
  +viewDashboard(): DashboardData
  +postTechOpportunity(opportunity: TechOpportunity): void
}

class Charity {
  -charityID: int
  -verificationStatus: string
  -charityLicenseNumber: string
  -techNeeds: List<TechNeed>
  +createOpportunity(): Opportunity
  +editOpportunity(opportunity: Opportunity): void
  +deleteOpportunity(opportunity: Opportunity): void
  +acceptVolunteerRequest(request: SignUpRequest): void
  +declineVolunteerRequest(request: SignUpRequest): void
  +cancelVolunteerAid(volunteer: Volunteer, opportunity: Opportunity): void
  +viewDashboard(): DashboardData
  +addTechNeed(techNeed: TechNeed): void
}

class PageAdmin {
  +resolveTicket(ticket: Ticket): void
  +manageSystem(): void
  +manageTechCategories(): void
}

class VolunteerInfo {
  -interests: List<string>
  -qualifications: List<string>
  -impactHistory: string
  -techSpecializations: List<TechSpecialization>
  -certifications: List<TechCertification>
  -pastEventsFeedback: List<EventFeedback>
  -performanceRatings: Map<Opportunity, float>
  +addInterest(interest: string): void
  +addQualification(qualification: string): void
  +updateImpactHistory(impact: string): void
  +addTechSpecialization(specialization: TechSpecialization): void
  +addCertification(certification: TechCertification): void
  +addEventFeedback(feedback: EventFeedback): void
  +getAverageRating(): float
  +getRecentFeedback(count: int): List<EventFeedback>
}

class EventFeedback {
  -feedbackID: int
  -opportunity: Opportunity
  -rating: float
  -comments: string
  -date: datetime
  -skillsUsed: List<Skill>
  -areaForImprovement: string
  +updateRating(rating: float): void
  +updateComments(comments: string): void
}

class SMBInfo {
  -businessType: string
  -companySize: string
  -industryFocus: string
  -techFocus: List<TechnologyArea>
}

class CharityInfo {
  -causeType: string
  -targetBeneficiaries: string
  -organizationalSize: string
  -digitalMaturity: string
}

class Opportunity {
  -opportunityID: int
  -title: string
  -description: string
  -date: datetime
  -location: string
  -status: string
  -requiredTechSkills: List<Skill>
  -skillLevel: SkillLevel
  -duration: string
  -projectType: string
  -remoteOption: bool
}

class TechOpportunity {
  -technologyStack: List<Technology>
  -developmentMethodology: string
  -teamSize: int
  -estimatedTimeCommitment: string
  -learningOutcomes: List<string>
}

class TechNeed {
  -category: string
  -urgency: int
  -description: string
  -requiredExpertiseLevel: SkillLevel
}

class Skill {
  -skillID: int
  -name: string
  -category: SkillCategory
  -description: string
}

enum SkillCategory {
  PROGRAMMING_LANGUAGE
  FRAMEWORK
  DATABASE
  CLOUD_PLATFORM
  DEVOPS
  UI_UX
  PROJECT_MANAGEMENT
  CYBERSECURITY
  DATA_SCIENCE
  OTHER
}

enum SkillLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

class Project {
  -projectID: int
  -title: string
  -description: string
  -technologiesUsed: List<Technology>
  -url: string
  -completionDate: date
}

class Technology {
  -technologyID: int
  -name: string
  -version: string
  -category: string
}

class OpportunityRegistry {
  -registryID: int
  -rating: float
  -skillsMatched: int
  -skillGapScore: float
  +connectVolunteerToOpportunity(): void
  +calculateSkillMatch(volunteer: Volunteer, opportunity: Opportunity): float
}

class TechnologyArea {
  -areaID: int
  -name: string
  -emergingTrends: List<string>
}

class TechCertification {
  -certificationID: int
  -name: string
  -issuer: string
  -dateObtained: date
  -expiryDate: date
  -verificationURL: string
}

class Partnership {
  -partnershipID: int
  -startDate: datetime
  -endDate: datetime
  -status: string
  -techFocus: List<TechnologyArea>
  +formalize(): void
}

class SMBAssociation {
  -associationID: int
  -startDate: datetime
  -skillContribution: List<Skill>
  +addVolunteer(volunteer: Volunteer): void
  +removeVolunteer(volunteer: Volunteer): void
}

class SkillMatchingEngine {
  +findMatchingOpportunities(volunteer: Volunteer): List<Opportunity>
  +findQualifiedVolunteers(opportunity: Opportunity): List<Volunteer>
  +calculateMatchScore(volunteer: Volunteer, opportunity: Opportunity): float
}

class TechSpecialization {
  -specializationID: int
  -area: string
  -description: string
  -relatedSkills: List<Skill>
}

' Existing classes that remain unchanged
class OpportunityWatchlist {
  -watchlistID: int
}

class OpportunityWatchlistEntry {
  -entryID: int
  -dateAdded: datetime
}

class CharityWatchlist {
  -watchlistID: int
}

class CharityWatchlistEntry {
  -entryID: int
  -dateAdded: datetime
}

class SignUpRequest {
  -requestID: int
  -status: string
  -skillsOffered: List<Skill>
  +triggerPartnershipEmail(): void
}

class Notification {
  -notificationID: int
  -message: string
  -type: string
  -timestamp: datetime
  +send(): void
}

class Ticket {
  -ticketID: int
  -description: string
  -status: string
  -techRelated: boolean
  +submit(): void
}

class DashboardData {
  -dashboardID: int
  -userMetrics: Map<string, string>
  -activeOpportunities: List<Opportunity>
  -completedProjects: int
  -impactSummary: string
  +generateReport(): void
}

class Message {
  -messageID: int
  -content: string
  -timestamp: datetime
  -isRead: boolean
  -attachments: List<String>
  -sender: User
  -recipients: List<User>
  -isSystemGenerated: boolean
  +markAsRead(): void
  +addAttachment(url: string): void
  +send(): void
}

enum MessageType {
  DIRECT_MESSAGE
  GROUP_MESSAGE
  OPPORTUNITY_RELATED
  PARTNERSHIP_RELATED
  TECHNICAL_SUPPORT
  SYSTEM_NOTIFICATION
  ALERT
  REMINDER
  STATUS_UPDATE
}

class Conversation {
  -conversationID: int
  -title: string
  -lastActivityTimestamp: datetime
  -participants: List<User>
  +addMessage(message: Message): void
  +addParticipant(user: User): void
  +removeParticipant(user: User): void
  +getMessageHistory(): List<Message>
}

' Inheritance relationships
User <|-r- Volunteer
User <|-r- SMB
User <|-- Charity
User <|-- PageAdmin

' User info relationships
Volunteer "1" -d- "1" VolunteerInfo
SMB "1" -- "1" SMBInfo
Charity "1" -- "1" CharityInfo

' Skill relationships
User "1" -- "0..*" Skill : has >
Opportunity "1" -- "0..*" Skill : requires >
Volunteer "1" -- "0..*" Project : showcases >

' Opportunity relationships
Charity "1" -- "0..*" Opportunity
Opportunity <|-- TechOpportunity
Charity "1" -u- "0..*" TechNeed
Volunteer "0..*" --- "0..*" OpportunityRegistry
OpportunityRegistry "0..*" -- "0..*" Opportunity
SkillMatchingEngine "1" -- "0..*" Volunteer : matches >
SkillMatchingEngine "1" --- "0..*" Opportunity : matches >

' Partnership relationships
Partnership "0..*" -- "1" SMB
Partnership "0..*" -- "1" Charity

' SMB Association relationships
SMBAssociation "0..*" -- "1" SMB
SMBAssociation "1" -- "0..*" Volunteer

' Opportunity Watchlist relationships
Volunteer "1" -- "0..1" OpportunityWatchlist
SMB "1" -d- "0..1" OpportunityWatchlist
OpportunityWatchlist "1" -- "0..*" OpportunityWatchlistEntry
OpportunityWatchlistEntry "0..*" -- "1" Opportunity

' Charity Watchlist relationships
Volunteer "1" -- "0..1" CharityWatchlist
SMB "1" -- "0..1" CharityWatchlist
CharityWatchlist "1" -- "0..*" CharityWatchlistEntry
CharityWatchlistEntry "0..*" -- "1" Charity

' Tickets
User "0..*" -- "0..*" Ticket : submits >
PageAdmin "0..*" -- "0..*" Ticket : < resolves

' SignUpRequest
Volunteer "1" -- "0..*" SignUpRequest
Opportunity "1" -- "0..*" SignUpRequest

' Notification
Notification "0..*" -- "1" User

' Add missing relationships
VolunteerInfo "1" -- "0..*" TechSpecialization : has >
VolunteerInfo "1" -- "0..*" TechCertification : possesses >
SMBInfo "1" -- "0..*" TechnologyArea : focuses on >
Partnership "1" -- "0..*" TechnologyArea : addresses >
Skill "0..*" -- "1" SkillCategory : categorized as >
Level "1" *-- "0..*" Volunteer : used by > 
Project "0..*" -- "0..*" Technology : uses >
Technology "0..*" -- "1" TechnologyArea : belongs to >

' Dashboard relationships
Volunteer "1" -- "0..1" DashboardData : views >
SMB "1" -- "0..1" DashboardData : views > 
Charity "1" -- "0..1" DashboardData : views >

' Fix references to Level vs SkillLevel
class Level {
  -levelID: int
  -name: string
  -description: string
  -requiredExperience: int
}

' Connect TechNeeds with Technology
TechNeed "0..*" -- "0..*" Technology : requires >

' Relationships
User "1" -- "0..*" Message : sends >
User "0..*" -- "0..*" Message : receives >
Message "0..*" -- "1" MessageType : has type >
Conversation "1" -- "0..*" Message : contains >
User "0..*" -- "0..*" Conversation : participates in >

' Add relationship between VolunteerInfo and EventFeedback
VolunteerInfo "1" -- "0..*" EventFeedback : contains >

@enduml

@startuml
title Volunteer Flows
start
:Volunteer accesses platform;
:Authenticate via Authentication Service;
while (Volunteer dashboard)

fork
    :Browse opportunities;
    split 
        :View Opportunity;
        :Apply for Opportunity;
    split again
        :Add Opportunity to Watchlist;
    end split
fork again
    :Manage LinkedIn Profile;
    split
        :Connect LinkedIn Account;
    split again
        :Import Skills from LinkedIn;
    split again
        :Disconnect LinkedIn;
    end split
fork again
    :Open Messages;
    split
        :View received messages;
    split again
        :Send new message;
    split again
        :Reply to conversation;
    end split
fork again
    :Click on active opportunity;
    split
        :View status & information;
    split again
        :Withdraw from opportunity;
    split again
        :Contact organiser;
        :Chat;
        detach
    split again
        :Submit feedback;
    end split
fork again
    :View my watchlist;
    :Click on saved opportunity;
    split
        :Apply for opportunity;
    split again
        :Remove from watchlist;
    end split
fork again
    :View impact metrics;
fork again
    :Submit ticket;
end merge
endwhile
-[hidden]->
detach

@enduml

@startuml
title Organiser Flows
start
:Organiser accesses platform;
:Authenticate via Authentication Service;
while (Organiser dashboard)

fork
    :Create opportunity;
    :Opportunity Creation Flow;
fork again 
    :View impact metrics;
fork again
    :Open Messages;
    split
        :View all conversations;
    split again
        :Start new conversation;
    split again
        :Reply to messages;
    end split
    :Chat;
    detach
fork again 
    :View created opportunities;
    :Click on opportunity;
        split 
            :Edit information;
            :Publish changes;
        split again
            :Send notifications to interested volunteers;
        split again
            :View associated volunteers; 
            :Click on volunteer;
                split 
                    :Open chat;
                    :Chat;
                    detach
                split again
                    :Submit volunteer feedback;
                    :Endorse volunteer skills;
                split again 
                    :Remove from opportunity;
                end split
        split again
            :Request LinkedIn validation for skills;
        split again
            :Close opportunity;
            :Initiate feedback collection;
        end split
fork again
    :Submit ticket;
end merge 
endwhile
-[hidden]->
detach

@enduml

@startuml
# Existing content...

# Add after account creation:
User -> Frontend: Connect LinkedIn Account
Frontend -> Auth: Request LinkedIn connection
Auth -> Auth: Generate OAuth request
Auth --> User: Redirect to LinkedIn consent
User -> Auth: Authorize connection
Auth -> DB: Store LinkedIn credentials
Auth -> Auth: Import LinkedIn skills
Auth -> DB: Store imported skills
Auth --> Frontend: LinkedIn connected successfully
Frontend --> User: Display imported skills
Frontend --> User: Enable notifications
User -> Frontend: Configure notification preferences
Frontend -> DB: Store notification settings

@enduml

@startuml
# Include existing content...

# Add messaging between volunteer and organizer:
Volunteer -> App: Open conversation with organizer
App -> App: Create new conversation
App -> Organiser: Add to conversation
Volunteer -> App: Send message
App -> Organiser: Deliver message notification
Organiser -> App: View message
Organiser -> App: Reply to volunteer
App -> Volunteer: Deliver message notification

# Add LinkedIn validation:
App -> SkillMatch: Validate LinkedIn skills
SkillMatch -> SkillMatch: Compare LinkedIn skills with requirements
SkillMatch --> App: Return LinkedIn validation score

# Add feedback handling:
Organiser -> App: Request feedback after completion
App -> Volunteer: Send feedback request notification
Volunteer -> App: Submit feedback on opportunity
App -> Organiser: Send feedback notification
Organiser -> App: Submit feedback on volunteer
App -> Volunteer: Send skill endorsement notification

@enduml

@startuml 
title Opportunity Lifecycle
[*] --> Draft
Draft --> Published : Organiser publishes Opportunity
Published --> Closed : Deadline passed/\nManually closed
Published --> InProgress : Volunteers assigned
InProgress --> FeedbackCollection : Work finished
InProgress --> Cancelled : Cancelled by Organiser
FeedbackCollection --> Completed
Completed --> [*]
Cancelled --> [*]
Closed --> [*]

state Draft {
  [*] --> BasicInfo : Add basic info
  BasicInfo -r-> SkillsRequired : Add skills
  SkillsRequired -r> ReviewDraft : Complete
  ReviewDraft --> [*] : Confirm
}

state Published {
  [*] --> NotificationsSent
  NotificationsSent --> AwaitingApplications
  AwaitingApplications --> [*]
}

state InProgress {
  [*] --> VolunteersOnboarding
  VolunteersOnboarding --> ActiveWork
  ActiveWork --> [*]
}

state FeedbackCollection {
  [*] --> VolunteerFeedback : Collect feedback from volunteers
  VolunteerFeedback -r-> OrganizerFeedback : Collect feedback from organizers
  OrganizerFeedback -r-> ImpactMeasurement : Collect impact evaluation
  ImpactMeasurement --> SkillEndorsements : Process skill endorsements
  SkillEndorsements --> [*]
}

state Completed

@enduml

@startuml Volunteer Application State Machine
[*] --> Drafted

Drafted --> Pending : Submit application
Pending --> Active : Organizer gets notification with skill match 

Active --> Completed : Opportunity finished
Active --> Withdrawn : Volunteer withdraws
Active --> Removed : Organizer removes

Withdrawn --> [*]
Removed --> [*]
Completed --> FeedbackPending : Awaiting feedback
FeedbackPending --> Closed : Feedback submitted
Closed --> [*]

state Pending {
  [*] --> AwaitingInitialReview
  AwaitingInitialReview --> LinkedInVerification : Initial review passed
  LinkedInVerification --> SkillMatching : LinkedIn profile validated
  SkillMatching --> [*]
}

state Active {
  [*] --> Onboarding
  Onboarding -r-> InProgress : Onboarding completed
  InProgress -r-> FinalStage : Near completion
  FinalStage --> [*]
}

state Completed {
  [*] --> ImpactRecording
  ImpactRecording -r-> VolunteerFeedback : Impact recorded
  VolunteerFeedback --> OrganizerFeedback : Volunteer submits feedback
  OrganizerFeedback --> SkillsEndorsement : Organizer submits feedback
  SkillsEndorsement --> [*] : Skills endorsed
}

@enduml
